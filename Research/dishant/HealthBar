game.HUD.HealthBar = me.Renderable.extend({ 
    init: function(x, y) { 
        var settings = {}, 
            width = 128; 
            height = 32; 
        settings.spritewidth = settings.width = width; 
        settings.spriteheight = settings.height = height; 
        this._super(me.Renderable, 'init', [x, y, settings]); 

        this.image = "healthbar"; 

        this.health = 4; 
    }, 

    update: function() { 
        if (this.health !== game.data.health) { 
            this.health = game.data.health; 

            return true; 
        } 
        return false; 
    }, 
}); 



game.HUD.HPDisplay = me.Renderable.extend({
    init : function (x,y) {

        this._super(me.GUI_Object, "init", [ x, y, {
            image: "hp_bar"
            
        } ]);
        
        this.anchorPoint.set(0, 0);


        /*this. back = new me.Sprite(x, y, {
            image: "hp_back",
            anchorPoint: new me.Vector2d(0, 0),
        });
        this. bar = new me.Sprite(28, 10, {
            image: game.hp_bar,
            anchorPoint: new me.Vector2d(0, 0),
        });
        this. frame = new me.Sprite(0, 0, {
            image: "hp_frame",
            anchorPoint: new me.Vector2d(0, 0),
        });*/

        /*this._super(me.GUI_Object, "init", [ 25, 9, {
            image: game.hp_back
            
        } ]);
        
        this.anchorPoint.set(0, 0);

        this._super(me.GUI_Object, "init", [ 0, 0, {
            image: game.hp_frame
            
        } ]);
        
        this.anchorPoint.set(0, 0);
*/



        /*this.font = new me.Font('Times New Roman', 30, 'white');
        var size = this.font.measureText(me.video.renderer, 'HP: 0');
        this._super(
            me.Renderable,
            'init',
            [
                0, 0,
                size.width - 10, size.height - 1
            ]
        );
        this.floating = true;
        this.pos.z = 1000;
        this.hp = this.hpMax = initial_hp;
        this.HPSubscription = me.event.subscribe('hp change', (hp) => (this.updateHP(hp)));

        this. back = new me.Sprite(25, 9, {
            image: "hp_back",
            anchorPoint: new me.Vector2d(0, 0),
        });
        this. bar = new me.Sprite(28, 10, {
            image: "hp_bar",
            anchorPoint: new me.Vector2d(0, 0),
        });
        this. frame = new me.Sprite(0, 0, {
            image: "hp_frame",
            anchorPoint: new me.Vector2d(0, 0),
        });*/
    },

    update: function() {
        if (this.score != game.data.score) {
            this.score = game.data.score;
            

            this.bar.pos.x = 28 - Math.round(45* (1- this.score / (1000)));
        }
    },
/*
    onDeactivateEvent: function() {
        me.event.unsubscribe(this.HPSubscription);
    },*/

    draw: function(renderer) {
        this.dirty = false;
        var screenWidth = renderer.getWidth();
        var screenHeight = renderer.getHeight();
        //renderer.save();
        //renderer.setColor(LD38.black);
        //renderer.fillRect(this.pos.x, this.pos.y, this.width, this.height);
        //this.font.draw(renderer, 'HP: ' + this.hp, this.pos.x - 1, this.pos.y);
        //renderer.restore();

        var displayScore = this.score;
        if(displayScore > 1000) displayScore = this.score;
        if(displayScore < 0) displayScore = 0;

        this.back.draw(renderer);
        this.bar.draw(renderer);
        this.frame.draw(renderer);
    },

    /*update : function (dt) {
        return this.dirty;
    },*/
});
